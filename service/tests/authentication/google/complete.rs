use actix_web::test;
use arkenstone_lib::TestResponse;
use insta::{assert_display_snapshot, assert_json_snapshot};
use serde_json::{json, Value};
use wiremock::{
    matchers::{method, path},
    Mock, MockServer, ResponseTemplate,
};

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_no_code() {
    let service = crate::service::Service::new().await;
    let res = service
        .request(
            test::TestRequest::get()
                .uri("/authentication/google/complete")
                .to_request(),
        )
        .await;
    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_invalid_client() {
    let res = run_test(
        "/authentication/google/complete?code=abc",
        400,
        json!({
            "error": "invalid_client",
            "error_description": "The OAuth client was not found."
        }),
    )
    .await;

    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_invalid_code() {
    let res = run_test(
        "/authentication/google/complete?code=abc",
        400,
        json!({
        "error": "invalid_grant",
        "error_description": "Malformed auth code."
        }),
    )
    .await;

    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_missing_id_token() {
    let res = run_test(
        "/authentication/google/complete?code=abc",
        200,
        json!({
            "access_token": "AccessToken",
            "token_type": "Bearer",
            "expires_in": 3600
        }),
    )
    .await;
    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_invalid_id_token() {
    let res = run_test(
        "/authentication/google/complete?code=abc",
        200,
        json!({
            "access_token": "AccessToken",
            "token_type": "Bearer",
            "expires_in": 3600,
            "id_token": "im.not.valid"
        }),
    )
    .await;
    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

#[actix_rt::test]
#[cfg_attr(not(feature = "docker_tests"), ignore)]
async fn test_missing_subject() {
    let res = run_test(
        "/authentication/google/complete?code=abc",
        200,
        json!({
            "access_token": "AccessToken",
            "token_type": "Bearer",
            "expires_in": 3600,
            // Generated by jwt.io
            "id_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNvbWVVc2VyQGV4YW1wbGUuY29tIiwibmFtZSI6IlRlc3QgVXNlciIsInBpY3R1cmUiOiJodHRwczovL2V4YW1wbGUuY29tL3NvbWVVc2VySW1hZ2UifQ.qjIDDgI46LIxkWgESRJi55iiEHk2f4nChYUjpbFh9xI"        }),
    )
    .await;
    assert_display_snapshot!(res.headers());
    assert_json_snapshot!(res.to_json().unwrap());
}

async fn run_test(url: &str, google_status_code: u16, google_response: Value) -> TestResponse {
    let mock_server = MockServer::start().await;

    Mock::given(method("POST"))
        .and(path("/oauth2/v4/token"))
        .respond_with(ResponseTemplate::new(google_status_code).set_body_json(google_response))
        .mount(&mock_server)
        .await;

    let service = crate::service::Service::new_with_settings(&mut |settings| {
        settings.google_token_url = Some(format!("{}/oauth2/v4/token", mock_server.uri()))
    })
    .await;

    service
        .request(test::TestRequest::get().uri(url).to_request())
        .await
}
